@page
@model IndexModel
@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <title>Homework</title>
    <link rel="stylesheet" href="~/css/Styles.css" />
    <link rel="shortcut icon" type="image/ico" href="~/favicon.ico" sizes="16x16">
    <script src="https://vk.com/js/api/openapi.js?160" type="text/javascript"></script>
    <script src="~/js/browser&OS.js"></script>
    <!--Не менять местами эти два скрипта. Второй зависит от первого!-->
    <script src="~/js/JavaScript.js"></script>
</head>
<body>
    <header>
        <h1 id="siteInfo">
            Домашние задания 9 "Б" класса
            <br />
            Гимназии №343
        </h1>
    </header>
    <noscript>
        <style>
            #infoVkAuthorization {
                display: none;
            }

            footer {
                text-align: center;
            }
        </style>
        <div class="announcement">
            <p>
                <strong>Внимание!</strong>
                <br />
                1) В браузере отключён JavaScript, его нужно включить для работы сайта.
                <br />
                <a href="https://yandex.ru/support/common/browsers-settings/browsers-java-js-settings.html">Как включить JavaScript</a>
                <br />
                2) Возможно у вас старый или левый браузер - поставьте современный, либо откройте сайт в другом браузере.
                <br />
                Если современный - обновите до последней версии.
                <br />
                3) Попробуйте просто обновить страницу - может какой-то сбой.
                <br />
                4) Если ничего не помогло - обращайтесь:
                <br />
                <a href="https://vk.com/sergo.yakovlev">Моя страница ВК</a>
            </p>
        </div>
    </noscript>
    <script type="text/javascript">
        VK.init({
            apiId: 6976164
        });
    </script>
    <div id="vkAuthorizer"></div>
    <script type="text/javascript">
        window.onload = function () {
            VK.Widgets.Auth('vkAuthorizer', {
                "onAuth": function () {
                    show();
                }
            });
        }
    </script>
    <p id="infoVkAuthorization">
        Чтобы просмотреть домашние задания, нужно авторизоваться в контакте.
        <br />
        При нажатии кнопки вы будете переадресованы на вконтакт,
        <br />
        затем обратно на сайт.
    </p>
    <div id="content">

        @using System.IO;
        @using Newtonsoft.Json.Linq;
        @using System.Linq;
        @using static ClassLibrary.Pathes;
        @{
            if (!Directory.Exists(pathToDataDirectory))
            {
                Directory.CreateDirectory(pathToDataDirectory);
            }

            var currentWeekDirectories = Directory.GetDirectories(pathToDataDirectory);

            bool isFiles = false;
            int tableCount = 0;
            foreach (var currentWeekDir in currentWeekDirectories)
            {
                var lastFile = new DirectoryInfo(currentWeekDir)
                                    .GetFiles()
                                    .OrderByDescending(fi => fi.CreationTime)
                                    .Where(file =>
                                    {
                                        if (file.Name == "diffs.json") return false;
                                        if (!isFiles) isFiles = true;
                                        string readedFile;
                                        using (var reader = new StreamReader(file.FullName))
                                        {
                                            readedFile = reader.ReadToEnd();
                                        }
                                        var json = JObject.Parse(readedFile);
                                        var items = json["data"]["items"];
                                        if (items.Any()) return true;
                                        else return false;
                                    })
                                    .FirstOrDefault();

                if (lastFile != null)
                {
                    var pathToDiffsFile = Directory.GetFiles(currentWeekDir, "diffs.json");
                    JArray diffsJson = null;
                    if (pathToDiffsFile.Any())
                    {
                        string readedDiffsFile;
                        using (var reader = new StreamReader(pathToDiffsFile.Single()))
                        {
                            readedDiffsFile = reader.ReadToEnd();
                        }
                        diffsJson = JArray.Parse(readedDiffsFile);
                    }

                    //int tdCount = 0;
                    @Html.Raw("<table>");
                    tableCount++;
                    string readedFile;
                    using (var reader = new StreamReader(lastFile.FullName))
                    {
                        readedFile = reader.ReadToEnd();
                    }

                    var tableUpdatedTime = System.IO.File.GetLastWriteTime(lastFile.FullName);
                    @Html.Raw("<caption>");
                    <p>Обновлено @tableUpdatedTime.ToString("d.MM H:mm")</p>
                    @Html.Raw("</caption>");
                    // Начинаем парсить json
                    //

                    var json = JObject.Parse(readedFile);
                    var items = json["data"]["items"].AsEnumerable();

                    items = items.OrderByDescending(item => item["tasks"].Any()).ThenBy(item => item["number"]);
                    /* OrderByDescending - сортировка по убыванию, т.е сначала те предметы, где есть домашка,
                     * а потом без домашки.
                     * OrderBy - сортировка по возрастанию, то есть номера уроков по возрастанию
                     */

                    // Группировка по дням недели
                    var groupsbyDayOfWeek = items.GroupBy(i => DateTime.ParseExact(i["datetime_from"].ToString(), "dd.MM.yyyy HH:mm:ss", null).DayOfWeek);
                    /* Упорядоченная группировка по дням недели,
                     * то есть сначала понедельник, затем вторник, среда и т. д. */
                    var itemsGroupedByWeeksDay = groupsbyDayOfWeek.OrderBy(grp => (int)grp.Key);
                    // Пишем дни недели, в которые есть домашка(иначе этого дня нет в itemsGroupedByWeekDay)

                    @Html.Raw("<tr>");

                    foreach (var weekDayItems in itemsGroupedByWeeksDay)
                    {
                        var date = DateTime.ParseExact(weekDayItems.First()["datetime_from"].ToString(), "dd.MM.yyyy HH:mm:ss", null).Date;
                        @Html.Raw("<th>");
                        <span class="dayWeek">@DayOfWeekExtention.ToRussianString(weekDayItems.Key)</span>
                        <br />
                        <span class="date">@date.ToString("dd.MM")</span>
                        @Html.Raw("</th>");
                    }
                    @Html.Raw("</tr>");

                    // k - количество пройденных строк
                    int k = 0;
                    // rowCount - максимальное кол-во строк. Вычисляется по самому большому кол-ву уроков
                    // в какой либо день.
                    var rowCount = itemsGroupedByWeeksDay.Select(grp => grp.Count()).DefaultIfEmpty().Max();
                    while (rowCount > k)
                    {
                        @Html.Raw("<tr>"); // Одна строка на всю неделю

                        // Берем уроки в определенный день из уроков, сгруппированных по дням недели.
                        // foreach пишет их построчно(понедельник урок, вторник урок, среда урок и т. д.)
                        foreach (var weekDayItems in itemsGroupedByWeeksDay)
                        {

                            var item = weekDayItems.Skip(k).FirstOrDefault();
                            @Html.Raw("<td>"); // Одна ячейка на один урок
                              //Console.Write(item);
                            if (item != null)
                            {
                                /* При изменений символов ':', 'Дз: ' не забыть поменять их в
                                 * функции CalculateCellAsString in JavaScript.js.*/

                                var subject = item["subject_name"].ToString();
                                var lesson_content = item["content_name"].ToString();
                                var tasks = item["tasks"];
                                var datetimeFrom = item["datetime_from"].ToString();
                                // Пишем домашку у уроков.
                                // foreach нужен, вдруг будет несколько дз!!! у одного и того же предмета
                                <span class="subject">@subject:</span>
                                <br />
                                <span class="lesson_content">@lesson_content</span>
                                <br class="br" />
                                foreach (var task in tasks)
                                {
                                    var homework = task["task_name"].ToString();
                                    <span class="homework">Дз: @homework</span>
                                    <br />
                                }
                                if (diffsJson != null)
                                {
                                    foreach (var jsonObjects in diffsJson)
                                    {
                                        var item2 = jsonObjects["Item2"];
                                        var item1 = jsonObjects["Item1"];
                                        if (item2.Any())
                                        {
                                            var subjectName = item2["subject_name"].ToString();
                                            var datetime = item2["datetime_from"].ToString();
                                            var updateTime = DateTime.ParseExact(item2["updateTime"].ToString(), "dd.MM.yyyy HH:mm:ss", null).ToString("d.MM H:mm");
                                            var status = item2["SubjectStatus"].ToString();
                                            var homeworkStatus = item2["HomeworkStatus"].ToString();

                                            if (subjectName == subject && datetime == datetimeFrom)
                                            {
                                                if (status == "new" && item2["tasks"].Any())
                                                {
                                                    <span class="dzAdded" data-tooltip="Домашка появилась">П @updateTime</span>
                                                }
                                                else if (homeworkStatus == "changed")
                                                {

                                                    if (item1.Any() && item1["tasks"].Any() && item2["tasks"].Any())
                                                    {
                                                        <span class="dzChanged" data-tooltip="Домашка изменилась">И @updateTime</span>
                                                    }
                                                    else if (item1.Any() && !item1["tasks"].Any() && item2["tasks"].Any())
                                                    {
                                                        <span class="dzAdded" data-tooltip="Домашка появилась(предмет раньше был)">П(прб) @updateTime</span>
                                                    }
                                                    else if (item1.Any() && !item2["tasks"].Any() && item1["tasks"].Any())
                                                    {
                                                        /* Вверху дз, скорее всего, не будет.
                                                         * Лишняя строка. Поэтому стоит class "br"
                                                         * А если будет, то будут и другие события вместе с этим.*/
                                                        <span class="dzDeleted" data-tooltip="Домашка удалена">У @updateTime</span>
                                                        foreach (var task in item1["tasks"])
                                                        {
                                                            <br />
                                                            <span class="dzDeleted">Дз(удалено): @task["task_name"].ToString()</span>
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            @Html.Raw("</td>");
                        }
                        @Html.Raw("</tr>");
                        k++;
                    }
                    if (diffsJson != null)
                    {
                        foreach (var delObjects in diffsJson)
                        {
                            var item1 = delObjects["Item1"];
                            if (item1.Any() && item1["SubjectStatus"].ToString() == "deleted" && item1["tasks"].Any())
                            {
                                @Html.Raw("<tr>");
                                foreach (var weekDay in itemsGroupedByWeeksDay)
                                {
                                    var weekDate = DateTime.ParseExact(weekDay.First()["datetime_from"].ToString(), "dd.MM.yyyy HH:mm:ss", null).Date;
                                    var delDate = DateTime.ParseExact(item1["datetime_from"].ToString(), "dd.MM.yyyy HH:mm:ss", null).Date;
                                    @Html.Raw("<td class='delSubjectCell'>");
                                    if (weekDate == delDate)
                                    {

                                        var subject = item1["subject_name"].ToString();
                                        var lesson_content = item1["content_name"].ToString();
                                        var updateTime = DateTime.ParseExact(item1["updateTime"].ToString(), "dd.MM.yyyy HH:mm:ss", null).ToString("d.MM H:mm");
                                        var tasks = item1["tasks"];
                                        <p class="dzDeleted">
                                            <span data-tooltip="Домашка удалена">У @updateTime</span>
                                            <br />
                                            <span>@subject:</span>
                                            <br />
                                            <span class="lesson_content" style="all: inherit">@lesson_content</span>
                                            <br class="br" />
                                            @foreach (var task in tasks)
                                            {
                                                <span class="dzDeleted">Дз: @task["task_name"].ToString()</span>
                                                <br />
                                            }
                                        </p>
                                    }
                                    @Html.Raw("</td>");
                                }
                                @Html.Raw("</tr>");
                            }
                        }
                    }
                    @Html.Raw("</table>");
                }
            }

            if (!isFiles && tableCount == 0)
            {
                <p class="announcement">
                    <strong>ВНИМАНИЕ!</strong>
                    <br />
                    <span>Данные на сервере отсутствуют.</span>
                    <br />
                    <span>Не удалось получить данные с электронного дневника.</span>
                </p>
            }
            else if (isFiles && tableCount == 0)
            {
                var updateTimeList = new List<DateTime>();
                foreach (var curWeekdirectory in currentWeekDirectories)
                {
                    var currentDirectoryUpdateTime = System.IO.Directory.GetLastWriteTime(curWeekdirectory);
                    updateTimeList.Add(currentDirectoryUpdateTime);
                }
                var minTime = updateTimeList.Min().ToString("d.MM H:mm");
                <p class="announcement">Электронный дневник пустой на @minTime</p>
            }
        }
    </div>
    <footer>
        <form id="form">
            <input type="checkbox" id="ShowLessonContent" />Темы уроков
            <br />
            <span id="CheckboxHomeworkNotifications">
                <input type="checkbox" id="ShowHomeworkNotifications" />События домашки
                <br />
            </span>
            <!--<input type="checkbox" id="ShowHomeworkNotifications" />События домашки-->
            <!--<br />-->
            <!--<input type="checkbox" id="ShowDoneHomework" />Готовые дз-->
            <span id="CheckboxInputDoneHomework">
                <input type="checkbox" id="ShowDoneHomework" />Готовые дз
            </span>
        </form>

        <span class="ltd">
            Данные обновляются ежедневно с 8:00 до 23:00 каждые 15 минут.
            <br />
            Чтобы посмотреть расшифровку событий домашек:
            <br />
            На компе: подвести мышь к событию.
            <br />
            На смартфоне: Нажать на событие и удерживать. Клик куда-либо подсказку убирает.
            <br />
            Сервис предоставляется "как есть", без каких-либо гарантий и обязательств.
            <br />
            Разработчик: Сергей Яковлев, 2019
        </span>
    </footer>
</body>
</html>