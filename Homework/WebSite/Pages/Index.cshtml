@page
@model IndexModel
@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>

    <meta name="viewport" content="width=device-width" innitial-scale="0.1" maximum-scale="1" />
    <title>Homework</title>
    <link rel="stylesheet" href="~/css/Styles.css" />
    <link rel="shortcut icon" type="image/ico" href="~/favicon.ico" sizes="16x16">
    <script src="https://vk.com/js/api/openapi.js?160" type="text/javascript"></script>
    <script src="~/js/JavaScript.js"></script>
</head>
<body>
    <!--#region Yandex.Metrika counter-->
    <script type="text/javascript">
        (function (m, e, t, r, i, k, a) {
            m[i] = m[i] || function () { (m[i].a = m[i].a || []).push(arguments) };
            m[i].l = 1 * new Date(); k = e.createElement(t), a = e.getElementsByTagName(t)[0], k.async = 1, k.src = r, a.parentNode.insertBefore(k, a)
        })
            (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");
        ym(53635789, "init", {
            clickmap: true,
            trackLinks: true,
            accurateTrackBounce: true
        });
    </script>
    <noscript><div><img src="https://mc.yandex.ru/watch/53635789" style="position:absolute; left:-9999px;" alt="" /></div></noscript>
    <!--#endregion-->
    <header>
        <h1 id="siteInfo">
            Домашние задания 8 "Б" класса
            <br />
            Гимназии №343
        </h1>
    </header>
    <noscript>
        <div class="announcement">
            <p>
                <strong class="attention">Внимание!</strong>
                <br />
                Для работы требуются:
                <br />
                1) JavaScript (он у вас отключён)
                <br />
                2) Файлы cookies(желательно)
                <br />
                3) Никаких Internet Explorer'ов и других допотопных браузеров
        </div>
    </noscript>
    <script type="text/javascript">
        VK.init({
            apiId: 6976164
        });
    </script>
    <div id="vkAutorizer"></div>
    <script type="text/javascript">
        window.onload = function () {
            VK.Widgets.Auth('vkAutorizer', {
                "onAuth": function () {
                    show();
                    alert("Вы авторизовались успешно!");
                }
            });
        }
    </script>
    <p id="infoVkAutorization">
        Чтобы просмотреть домашние задания, нужно авторизоваться в контакте.
        <br />
        При нажатии кнопки вы будете переадресованы на вконтакт,
        <br />
        затем обратно на сайт.
    </p>
    <div id="content">
        <form>
            <input type="checkbox" id="ShowLessonContent" />Показывать контент уроков<br />
        </form>
        @using System.IO;
        @using Newtonsoft.Json.Linq;
        @using System.Linq;
        @using Newtonsoft.Json;
        @{
            string pathToDiffsFile = @"C:\Users\Serega\Desktop\Publish\Diffs\diffs.json";
            string readedDiffsFile;
            using (var reader = new StreamReader(pathToDiffsFile))
            {
                readedDiffsFile = reader.ReadToEnd();
            }
            var diffsJson = JArray.Parse(readedDiffsFile);
            /*@Html.Raw("<table>");
            foreach (var delObjects in diffsJson)
            {
                var item1 = delObjects["Item1"];
                if (item1.Any())
                {
                    var status = item1["SubjectStatus"].ToString();
                    var diffsTasks = item1["tasks"];
                    if (status == "deleted" && diffsTasks.Any())
                    {
                        @Html.Raw("<td>");

                        var delSubject = item1["subject_name"].ToString();
                        var delTasks = item1["tasks"];
                        var updateTime = item1["updateTime"].ToString();
                        foreach (var delTask in delTasks)
                        {
                            //@Html.Raw("<td>");
                            <span>ПРЕДМЕТ С ДОМАШКОЙ УДАЛЁН @updateTime</span>
                            <br />
                            <span>@delSubject:</span>
                            <br />
                            <span>@delTask["task_name"].ToString()</span>
                            //@Html.Raw("</td>");
                        }
                    }
                    @Html.Raw("</td>");
                }
            }
            @Html.Raw("</table>");*/

            string pathToDataDirectory = @"C:\Users\Serega\Desktop\Publish\HomeworkData";

            if (!Directory.Exists(pathToDataDirectory))
            {
                Directory.CreateDirectory(pathToDataDirectory);
            }

            var currentWeekDirectories = Directory.GetDirectories(pathToDataDirectory);
            foreach (var currentWeekDir in currentWeekDirectories)
            {
                var lastFile = new DirectoryInfo(currentWeekDir)
                                    .GetFiles()
                                    .OrderByDescending(fi => fi.CreationTime)
                                    .FirstOrDefault();

                //var files = Directory.GetFiles(currentWeekDir);
                //string latestFile = "";
                //DateTime lastUpdated = DateTime.MinValue;

                //foreach (var file in files)
                //{
                //    var fileUpdatedTime = System.IO.File.GetLastWriteTime(file);
                //    if (fileUpdatedTime > lastUpdated)
                //    {
                //        lastUpdated = fileUpdatedTime;
                //        latestFile = file;
                //    }
                //}

                if (lastFile != null)
                {

                    //int tdCount = 0;
                    @Html.Raw("<table>");
                    string readedFile;

                    using (var reader = new StreamReader(lastFile.FullName))
                    {
                        readedFile = reader.ReadToEnd();
                    }

                    // Начинаем парсить json
                    //

                    var json = JObject.Parse(readedFile);
                    var items = json["data"]["items"].AsEnumerable();

                    items = items.OrderByDescending(item => item["tasks"].Any()).ThenBy(item => item["number"]);
                    /* OrderByDescending - сортировка по убыванию, т.е сначала те предметы, где есть домашка,
                     * а потом без домашки.
                     * OrderBy - сортировка по возрастанию, то есть номера уроков по возрастанию
                     */

                    // Группировка по дням недели
                    var groupsbyDayOfWeek = items.GroupBy(i => DateTime.ParseExact(i["datetime_from"].ToString(), "dd.MM.yyyy HH:mm:ss", null).DayOfWeek);
                    /* Упорядоченная группировка по дням недели,
                     * то есть сначала понедельник, затем вторник, среда и т. д. */
                    var itemsGroupedByWeeksDay = groupsbyDayOfWeek.OrderBy(grp => (int)grp.Key);
                    // Пишем дни недели, в которые есть домашка(иначе этого дня нет в itemsGroupedByWeekDay)

                    @Html.Raw("<tr>");
                    foreach (var weekDayItems in itemsGroupedByWeeksDay)
                    {
                        var date = DateTime.ParseExact(weekDayItems.First()["datetime_from"].ToString(), "dd.MM.yyyy HH:mm:ss", null).Date;
                        @Html.Raw("<th>");
                        <span class="dayWeek">@DayOfWeekExtention.ToRussianString(weekDayItems.Key)</span>
                        <br />
                        <span class="date">@date.ToString("dd.MM")</span>
                        @Html.Raw("</th>");
                    }
                    @Html.Raw("</tr>");

                    // k - количество пройденных строк
                    int k = 0;
                    // rowCount - максимальное кол-во строк. Вычисляется по самому большому кол-ву уроков
                    // в какой либо день.
                    var rowCount = itemsGroupedByWeeksDay.Select(grp => grp.Count()).DefaultIfEmpty().Max();
                    while (rowCount > k)
                    {
                        @Html.Raw("<tr>"); // Одна строка на всю неделю

                        // Берем уроки в определенный день из уроков, сгруппированных по дням недели.
                        // foreach пишет их построчно(понедельник урок, вторник урок, среда урок и т. д.)
                        foreach (var weekDayItems in itemsGroupedByWeeksDay)
                        {

                            var item = weekDayItems.Skip(k).FirstOrDefault();
                            @Html.Raw("<td>"); // Одна ячейка на один урок
                              //Console.Write(item);
                            if (item != null)
                            {

                                var subject = item["subject_name"].ToString();
                                var lesson_content = item["content_name"].ToString();
                                var tasks = item["tasks"];
                                var datetimeFrom = item["datetime_from"].ToString();
                                // Пишем домашку у уроков.
                                // foreach нужен, вдруг будет несколько дз!!! у одного и того же предмета
                                <span class="subject">@subject:</span>
                                <br />
                                <span class="lesson_content">@lesson_content</span>
                                foreach (var task in tasks)
                                {
                                    var homework = task["task_name"].ToString();
                                    <br class="br" />
                                    <span class="homework">Дз: @homework</span>
                                }
                                foreach (var jsonObjects in diffsJson)
                                {
                                    var item2 = jsonObjects["Item2"];
                                    if (item2.Any())
                                    {
                                        var subjectName = item2["subject_name"].ToString();
                                        var datetime = item2["datetime_from"].ToString();
                                        var updateTime = item2["updateTime"].ToString();
                                        var status = item2["SubjectStatus"].ToString();
                                        var homeworkStatus = item2["HomeworkStatus"].ToString();
                                        var tasksInDiffs = item2["tasks"];

                                        if (subjectName == subject && datetime == datetimeFrom)
                                        {
                                            if (status == "new" && tasks.Any())
                                            {
                                                <br />
                                                <span>Домашка появилась @updateTime</span>
                                                /*ВАЖНО!!! Если несколько одинаковых данных в разных jsonObjects
                                                 * то напишется несколько <span>!!!.*/
                                            }
                                            else if (!tasks.Any() && tasksInDiffs.Any())
                                            {
                                                <br />
                                                <span>Домашка удалена @updateTime</span>
                                            }
                                            else if (homeworkStatus == "changed")
                                            {
                                                <br />
                                                <span>Домашка изменена @updateTime</span>
                                            }
                                        }
                                    }
                                }
                            }
                            @Html.Raw("</td>");
                        }
                        @Html.Raw("</tr>");
                        k++;
                    }
                    foreach (var delObjects in diffsJson)
                    {
                        var item1 = delObjects["Item1"];
                        if (item1.Any() && item1["SubjectStatus"].ToString() == "deleted" && item1["tasks"].Any())
                        {
                            @Html.Raw("<tr>");
                            foreach (var week in itemsGroupedByWeeksDay)
                            {
                                var weekDate = DateTime.ParseExact(week.First()["datetime_from"].ToString(), "dd.MM.yyyy HH:mm:ss", null).Date;
                                var delDate = DateTime.ParseExact(item1["datetime_from"].ToString(), "dd.MM.yyyy HH:mm:ss", null).Date;
                                @Html.Raw("<td>");
                                if (weekDate == delDate)
                                {
                                    //@Html.Raw("<td>");
                                    var subject = item1["subject_name"].ToString();
                                    var updateTime = item1["updateTime"].ToString();
                                    var tasks = item1["tasks"];
                                    <span>Предмет удалён!</span>
                                    <span>@subject</span>
                                    <br />
                                    <span>@updateTime</span>
                                    foreach (var task in tasks)
                                    {
                                        <span>@task["task_name"].ToString()</span>
                                    }
                                }
                                @Html.Raw("</td>");
                            }
                            @Html.Raw("</tr>");
                        }
                    }
                    @Html.Raw("</table>");
                }
            }

            /*if (files.Count() == 0)
            {
            <p class="announcement">
                <strong class="attention">ВНИМАНИЕ!</strong>
                <br />
                Данных нет.
                <br />
                Но это <strong class="attention">совсем не означает,</strong> что домашки нет.
                <br />
                Возможно, просто потерялись данные.
            </p>
            }
            else
            {
            string thisWeek = System.IO.File.GetLastWriteTime(files[0]).ToString("dd.MM.yyyy HH:mm:ss");
            <p class="fileModifiedTime">Эта неделя обновлена @thisWeek</p>
            if (files.Count() > 1) // Если других файлов нет, то будет exception
            {
            string otherWeeks = System.IO.File.GetLastWriteTime(files[1]).ToString("dd.MM.yyyy HH:mm:ss");
            <p class="fileModifiedTime">Остальные @otherWeeks</p>
            }*/
            <!-- #region create table-->
            <!--#endregion-->
            /*if (tdCount == 0)
            {
            <p class="announcement green">
                @{
                    List<System.DateTime> timeUpdateFiles = new List<System.DateTime>();
                    for (int i = 0; i < files.Count(); i++)
                    {
                        var updateTime = System.IO.File.GetLastWriteTime(files[i]);
                        timeUpdateFiles.Add(updateTime);
                    }
                    var minTime = timeUpdateFiles.Min().ToString("dd.MM.yyyy HH:mm:ss");
                }
                Электронный дневник пустой с @minTime!
            </p>
            }*/
            //}
        }
    </div>
</body>
</html>