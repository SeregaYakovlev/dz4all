function setIconOfOptionsAsClickable() {
    document.getElementById("options").onclick = function () {
        var options = document.getElementById("form");
        var visible = options.style.display;
        if (visible !== "inline") {
            options.style.display = "inline";
        }
        else {
            options.style.display = "none";
        }
    }
}

function SetCookie(name, value, expires) {
    console.log("SetCookie");
    var now = new Date();
    var AddedDate = now.setDate(now.getDate() + expires); // Здесь now переставляется на месяц из-за now.setDate
    var date = new Date(AddedDate);
    document.cookie = "" + name + "=" + encodeURIComponent(value) + ";" + "path=/;" + "expires=" + date.toUTCString();
}

function DeleteCookie(name) {
    console.log("DeleteCookie");
    var date = new Date(0);
    document.cookie = "" + name + "="; "path=/"; "expires=" + date.toUTCString();
}

function getCookie(name) {
    var matches = document.cookie.match(new RegExp(
        "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
    ));
    return matches ? decodeURIComponent(matches[1]) : undefined;
}

function ifCookiesEnabled() {
    console.log("ifCookiesEnabled");
    var cookiesEnabled = navigator.cookieEnabled;
    console.log(cookiesEnabled);
    if (!cookiesEnabled) {
        var para = document.createElement("p");
        para.innerHTML = `Файлы cookies выключены. Некоторые функции могут не работать.`;
        document.getElementsByTagName("header")[0].appendChild(para);
        para.className = "announcement";
    }
}

function hideTables() {
        /* Эта функция нужна для следущего:
         * Если у меня есть пустые json-файлы, то на странице образуется пустые места.
         * Эта функция их убирает. Заодно, при выключенной опции HomeworkNotifications
         * убираются пустые строки, предназначенные для удаленных предметов с домашкой,
         * которые на странице все равно есть при наличии этих предметов */

        var tables = document.getElementsByTagName("table");
        for (var b = 0; b < tables.length; b++) {
            var isTableEmpty = true;
            for (var m = 0; m < tables[b].rows.length; m++) {
                var isRowEmpty = checkIfCellsAreEmpty(tables[b].rows[m]);
                if (!isRowEmpty) isTableEmpty = false;
                else {
                    // здесь заодно убираются те самые пустые строки.
                    tables[b].rows[m].style.display = "none";
                }
            }
            if (isTableEmpty) {
                tables[b].style.display = "none";
            }
        }
}

function checkIfCellsAreEmpty(row) {
        var cells = row.cells;
        var isCellEmpty = false;
        for (var j = 0; j < cells.length; j++) {
            if (cells[j].innerHTML !== '') {
                return isCellEmpty;
            }
        }
        return !isCellEmpty;
}

function deleteEmptyPaintedElements() {
    /* Для чего эта функция нужна:
     * Дело в том, что все ячейки строки удаленных предметов(delObjects in Index.cshtml) с домашкой желтые.
     * Но ячейки могут быть пустыми. => Эта функция убирает пустые желтые ячейки,
     * чтобы желтым цветом подсвечивались только удаленные предметы с домашкой.*/

    var delElements = document.getElementsByClassName("paintedDelSubjectCell");
    var delElement;
    for (var x = 0; x < delElements.length; x++) {
        delElement = delElements[x];
        if (delElement.textContent === "") {
            delElement.classList.remove("paintedDelSubjectCell");
            x--; // уменьшается длина delElements, уменьшается и индекс.
        }
    }
}

function showToolTips() {
    let tooltipElem;

    document.onmouseover = function (event) {
        let target = event.target;

        // если у нас есть подсказка...
        let tooltipHtml = target.dataset.tooltip;
        if (!tooltipHtml) return;

        // ...создадим элемент для подсказки

        tooltipElem = document.createElement('div');
        tooltipElem.className = 'tooltip';
        tooltipElem.innerHTML = tooltipHtml;
        document.body.append(tooltipElem);

        // спозиционируем его сверху от аннотируемого элемента (top-center)
        let coords = target.getBoundingClientRect();

        let left = coords.left + (target.offsetWidth - tooltipElem.offsetWidth) / 2;
        if (left < 0) left = 0; // не заезжать за левый край окна

        let top = coords.top - tooltipElem.offsetHeight - 5;
        if (top < 0) { // если подсказка не помещается сверху, то отображать её снизу
            top = coords.top + target.offsetHeight + 5;
        }

        tooltipElem.style.left = left + 'px';
        tooltipElem.style.top = top + 'px';
    };

    document.onmouseout = function (e) {

        if (tooltipElem) {
            tooltipElem.remove();
            tooltipElem = null;
        }

    };
}